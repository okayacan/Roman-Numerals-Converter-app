AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Roman Numerals Converter Application (Python Flask) deployed on AWS EC2.
  This template creates an EC2 instance, a Security Group, and deploys the Flask application
  using UserData to install Python, Flask, Gunicorn, and Nginx.

Parameters:
  # EC2 Instance Type
  InstanceType:
    Description: Web Server EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium
    ConstraintDescription: Must be a valid EC2 instance type.

  # Latest Amazon Linux 2 AMI ID (adjust for your region if needed)
  # You can find the latest AMI ID for Amazon Linux 2 (HVM) SSD Volume Type
  # in your AWS region by going to EC2 -> Launch Instance -> Search for "Amazon Linux 2 AMI"
  LatestAmiId:
    Description: The ID of the AMI for the EC2 instance (e.g., ami-0abcdef1234567890 for Amazon Linux 2)
    Type: AWS::EC2::Image::Id
    Default: ami-0150ccaf51ab55a51 # Replace with a valid AMI ID for your region, e.g., ami-053b04d9e07850a01 for us-east-1 (Amazon Linux 2)

  # Key Pair for SSH access
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

Resources:
  # Security Group for the EC2 instance
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access to the web server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Allow HTTP access from anywhere
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 # Allow SSH access from anywhere (for demonstration, restrict in production)

  # EC2 Instance for the Flask application
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !GetAtt WebServerSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: RomanNumeralsConverterApp
      UserData: !Base64 |
        #!/bin/bash -xe
        exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
        echo "Starting user data script..."

        # Update system
        yum update -y

        # Install Python 3 and pip
        yum install -y python3 python3-pip

        # Install Flask and Gunicorn
        pip3 install Flask gunicorn

        # Create application directory
        mkdir -p /home/ec2-user/roman_converter_app
        cd /home/ec2-user/roman_converter_app

        # Create app.py
        cat <<EOF > app.py
        from flask import Flask, render_template, request, jsonify

        app = Flask(__name__)

        ROMAN_MAP = [
            (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),
            (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),
            (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'),
            (1, 'I')
        ]

        ROMAN_VALUES = {
            'I': 1, 'V': 5, 'X': 10, 'L': 50,
            'C': 100, 'D': 500, 'M': 1000
        }

        def int_to_roman(num):
            if not isinstance(num, int) or not (1 <= num <= 3999):
                return "Geçersiz giriş. Lütfen 1 ile 3999 arasında bir tam sayı girin."
            
            roman_numeral = ""
            for value, symbol in ROMAN_MAP:
                while num >= value:
                    roman_numeral += symbol
                    num -= value
            return roman_numeral

        def roman_to_int(roman_str):
            if not isinstance(roman_str, str):
                return "Geçersiz giriş. Lütfen bir Roma rakamı dizisi girin."
            
            roman_str = roman_str.upper()
            total = 0
            i = 0
            while i < len(roman_str):
                if i + 1 < len(roman_str) and roman_str[i:i+2] in ["CM", "CD", "XC", "XL", "IX", "IV"]:
                    if roman_str[i:i+2] == "CM": total += 900
                    elif roman_str[i:i+2] == "CD": total += 400
                    elif roman_str[i:i+2] == "XC": total += 90
                    elif roman_str[i:i+2] == "XL": total += 40
                    elif roman_str[i:i+2] == "IX": total += 9
                    elif roman_str[i:i+2] == "IV": total += 4
                    i += 2
                elif roman_str[i] in ROMAN_VALUES:
                    total += ROMAN_VALUES[roman_str[i]]
                    i += 1
                else:
                    return "Geçersiz Roma rakamı formatı."
            
            if int_to_roman(total) == roman_str:
                return total
            else:
                return "Geçersiz Roma rakamı formatı."

        @app.route('/', methods=['GET', 'POST'])
        def index():
            result = None
            error = None
            if request.method == 'POST':
                input_value = request.form.get('input_value', '').strip()
                convert_type = request.form.get('convert_type')

                if not input_value:
                    error = "Lütfen bir değer girin."
                else:
                    if convert_type == 'to_roman':
                        try:
                            num = int(input_value)
                            result = int_to_roman(num)
                        except ValueError:
                            error = "Geçersiz sayı. Lütfen bir tam sayı girin."
                    elif convert_type == 'to_int':
                        result = roman_to_int(input_value)
                    else:
                        error = "Geçersiz dönüşüm tipi."
                
                if isinstance(result, str) and ("Geçersiz" in result or "Hata" in result):
                    error = result
                    result = None

            return render_template('index.html', result=result, error=error)

        if __name__ == '__main__':
            app.run(debug=True, host='0.0.0.0', port=5000)
        EOF

        # Create templates directory and index.html
        mkdir -p templates
        cat <<EOF > templates/index.html
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Roma Rakamları Dönüştürücü</title>
            <script src="https://cdn.tailwindcss.com"></script>
            <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
            <style>
                body {
                    font-family: 'Inter', sans-serif;
                }
            </style>
        </head>
        <body class="bg-gradient-to-br from-blue-100 to-purple-200 min-h-screen flex items-center justify-center p-4">
            <div class="bg-white p-8 rounded-xl shadow-2xl w-full max-w-md transform transition-all duration-300 hover:scale-105">
                <h1 class="text-4xl font-extrabold text-center text-gray-800 mb-8">
                    Roma Rakamları Dönüştürücü
                </h1>

                <form method="POST" class="space-y-6">
                    <div>
                        <label for="input_value" class="block text-lg font-medium text-gray-700 mb-2">
                            Değer Girin (Sayı veya Roma Rakamı):
                        </label>
                        <input type="text" id="input_value" name="input_value"
                               class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-gray-900 text-lg"
                               placeholder="Örn: 1994 veya MCMXCIV" required>
                    </div>

                    <div class="flex flex-col sm:flex-row sm:space-x-4 space-y-4 sm:space-y-0">
                        <button type="submit" name="convert_type" value="to_roman"
                                class="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-102 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-75 text-lg">
                            Sayıdan Roma'ya Dönüştür
                        </button>
                        <button type="submit" name="convert_type" value="to_int"
                                class="flex-1 bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-102 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-75 text-lg">
                            Roma'dan Sayıya Dönüştür
                        </button>
                    </div>
                </form>

                {% if result %}
                    <div class="mt-8 p-6 bg-green-50 border border-green-200 rounded-lg shadow-inner text-center">
                        <h2 class="text-2xl font-semibold text-green-800 mb-2">Sonuç:</h2>
                        <p class="text-3xl font-extrabold text-green-900">{{ result }}</p>
                    </div>
                {% endif %}

                {% if error %}
                    <div class="mt-8 p-6 bg-red-50 border border-red-200 rounded-lg shadow-inner text-center">
                        <h2 class="text-2xl font-semibold text-red-800 mb-2">Hata:</h2>
                        <p class="text-xl text-red-700">{{ error }}</p>
                    </div>
                {% endif %}
            </div>
        </body>
        </html>
        EOF

        # Install Nginx
        yum install -y nginx

        # Configure Nginx to proxy to Gunicorn
        cat <<EOF > /etc/nginx/nginx.conf
        user nginx;
        worker_processes auto;
        error_log /var/log/nginx/error.log;
        pid /run/nginx.pid;

        include /usr/share/nginx/modules/*.conf;

        events {
            worker_connections 1024;
        }

        http {
            log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                              '\$status \$body_bytes_sent "\$http_referer" '
                              '"\$http_user_agent" "\$http_x_forwarded_for"';

            access_log  /var/log/nginx/access.log  main;

            sendfile            on;
            tcp_nopush          on;
            tcp_nodelay         on;
            keepalive_timeout   65;
            types_hash_max_size 2048;

            include             /etc/nginx/mime.types;
            default_type        application/octet-stream;

            # Load modular configuration files from the /etc/nginx/conf.d directory.
            # See http://nginx.org/en/docs/ngx_core_module.html#include
            # for more information.
            include /etc/nginx/conf.d/*.conf;

            server {
                listen 80;
                server_name _;

                location / {
                    proxy_pass http://127.0.0.1:8000; # Gunicorn'un çalıştığı port
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
        }
        EOF

        # Start Gunicorn as a systemd service
        cat <<EOF > /etc/systemd/system/roman_converter.service
        [Unit]
        Description=Gunicorn instance for Roman Numerals Converter
        After=network.target

        [Service]
        User=ec2-user
        Group=nginx
        WorkingDirectory=/home/ec2-user/roman_converter_app
        ExecStart=/usr/local/bin/gunicorn --workers 3 --bind 127.0.0.1:8000 app:app
        Restart=always
        PrivateTmp=true

        [Install]
        WantedBy=multi-user.target
        EOF

        systemctl daemon-reload
        systemctl start roman_converter
        systemctl enable roman_converter

        # Start Nginx
        systemctl start nginx
        systemctl enable nginx

        echo "User data script finished."
